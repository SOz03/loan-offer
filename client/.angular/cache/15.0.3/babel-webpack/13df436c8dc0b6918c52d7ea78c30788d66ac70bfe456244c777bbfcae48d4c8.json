{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { API_SERVICES, STORAGE_USER_KEY } from 'src/app/constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"..\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http, storageService) {\n    this.http = http;\n    this.storageService = storageService;\n    this.user = null;\n    try {\n      const storagedData = window.localStorage.getItem(STORAGE_USER_KEY);\n      if (storagedData) {\n        this.user = storagedData;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  get isLoggedIn() {\n    return Boolean(this.user);\n  }\n  login(params) {\n    return this.http.post(`${API_SERVICES.auth}/login`, params, httpOptions);\n  }\n  register(params) {\n    return this.http.post(`${API_SERVICES}/register`, params, httpOptions);\n  }\n  logout() {\n    this.user = null;\n    this.storageService.clear();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,mBAAmB;;;;AAIlE,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIJ,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAKD,OAAM,MAAOK,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJxB,SAAI,GAAQ,IAAI;IAMd,IAAI;MACF,MAAMC,YAAY,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACV,gBAAgB,CAAC;MAElE,IAAIO,YAAY,EAAE;QAChB,IAAI,CAACI,IAAI,GAAGJ,YAAY;;KAE3B,CAAC,OAAOK,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;;EAElB;EAEA,IAAIG,UAAU;IACZ,OAAOC,OAAO,CAAC,IAAI,CAACL,IAAI,CAAC;EAC3B;EAEAM,KAAK,CAACC,MAAmB;IACvB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,GAAGpB,YAAY,CAACqB,IAAI,QAAQ,EAAEF,MAAM,EAAEjB,WAAW,CAAC;EAC1E;EAEAoB,QAAQ,CAACH,MAAsB;IAC7B,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAC,GAAGpB,YAAY,WAAW,EAAEmB,MAAM,EAAEjB,WAAW,CAAC;EACxE;EAEAqB,MAAM;IACJ,IAAI,CAACX,IAAI,GAAG,IAAI;IAChB,IAAI,CAACL,cAAc,CAACiB,KAAK,EAAE;EAC7B;;AAjCWpB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["HttpHeaders","API_SERVICES","STORAGE_USER_KEY","httpOptions","headers","AuthService","constructor","http","storageService","storagedData","window","localStorage","getItem","user","e","console","log","isLoggedIn","Boolean","login","params","post","auth","register","logout","clear","factory","providedIn"],"sourceRoot":"","sources":["D:\\loan-offer-main\\client\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { API_SERVICES, STORAGE_USER_KEY } from 'src/app/constants';\nimport { LoginParams, RegisterParams } from './types';\nimport { StorageService } from '..';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  user: any = null;\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService\n  ) {\n    try {\n      const storagedData = window.localStorage.getItem(STORAGE_USER_KEY);\n\n      if (storagedData) {\n        this.user = storagedData;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  get isLoggedIn(): boolean {\n    return Boolean(this.user);\n  }\n\n  login(params: LoginParams): Observable<any> {\n    return this.http.post(`${API_SERVICES.auth}/login`, params, httpOptions);\n  }\n\n  register(params: RegisterParams): Observable<any> {\n    return this.http.post(`${API_SERVICES}/register`, params, httpOptions);\n  }\n\n  logout() {\n    this.user = null;\n    this.storageService.clear();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}