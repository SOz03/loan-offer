{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { API_SERVICES, STORAGE_USER_KEY } from 'src/app/constants';\nimport { business } from 'src/app/types';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"..\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class AuthService {\n  constructor(http, storageService) {\n    this.http = http;\n    this.storageService = storageService;\n    this.user = null;\n    this.setUser = user => {\n      this.user = user;\n    };\n    this.login = params => {\n      return this.http.post(`${API_SERVICES.auth}/login`, params, httpOptions);\n    };\n    this.register = params => {\n      return this.http.post(`${API_SERVICES.auth}/registration`, params, httpOptions);\n    };\n    this.logout = () => {\n      this.user = null;\n      this.storageService.clear();\n    };\n    try {\n      const storagedData = window.localStorage.getItem(STORAGE_USER_KEY);\n      if (storagedData) {\n        const userData = JSON.parse(storagedData);\n        this.user = userData;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  get isLoggedIn() {\n    return Boolean(this.user);\n  }\n  get hasEditAccess() {\n    return this.user?.role === business.UserRole.admin;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.StorageService));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,mBAAmB;AAIlE,SAASC,QAAQ,QAAQ,eAAe;;;;AAExC,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIL,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAE;CAChE;AAKD,OAAM,MAAOM,WAAW;EAGtBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJxB,SAAI,GAAgB,IAAI;IA2BxB,YAAO,GAAIC,IAAU,IAAI;MACvB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAClB,CAAC;IAED,UAAK,GAAIC,MAAmB,IAAqB;MAC/C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAC,GAAGX,YAAY,CAACY,IAAI,QAAQ,EAAEF,MAAM,EAAEP,WAAW,CAAC;IAC1E,CAAC;IAED,aAAQ,GAAIO,MAAsB,IAAqB;MACrD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnB,GAAGX,YAAY,CAACY,IAAI,eAAe,EACnCF,MAAM,EACNP,WAAW,CACZ;IACH,CAAC;IAED,WAAM,GAAG,MAAK;MACZ,IAAI,CAACM,IAAI,GAAG,IAAI;MAChB,IAAI,CAACD,cAAc,CAACK,KAAK,EAAE;IAC7B,CAAC;IAxCC,IAAI;MACF,MAAMC,YAAY,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAChB,gBAAgB,CAAC;MAElE,IAAIa,YAAY,EAAE;QAChB,MAAMI,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,CAAC;QAEzC,IAAI,CAACL,IAAI,GAAGS,QAAQ;;KAEvB,CAAC,OAAOG,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;;EAElB;EAEA,IAAIG,UAAU;IACZ,OAAOC,OAAO,CAAC,IAAI,CAAChB,IAAI,CAAC;EAC3B;EAEA,IAAIiB,aAAa;IACf,OAAO,IAAI,CAACjB,IAAI,EAAEkB,IAAI,KAAKzB,QAAQ,CAAC0B,QAAQ,CAACC,KAAK;EACpD;;AA1BWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["HttpHeaders","API_SERVICES","STORAGE_USER_KEY","business","httpOptions","headers","AuthService","constructor","http","storageService","user","params","post","auth","clear","storagedData","window","localStorage","getItem","userData","JSON","parse","e","console","log","isLoggedIn","Boolean","hasEditAccess","role","UserRole","admin","factory","providedIn"],"sourceRoot":"","sources":["D:\\loan-offer-main\\client\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { API_SERVICES, STORAGE_USER_KEY } from 'src/app/constants';\nimport { LoginParams, RegisterParams } from './types';\nimport { StorageService } from '..';\nimport { User } from 'src/app/models';\nimport { business } from 'src/app/types';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\n};\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  user: User | null = null;\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService\n  ) {\n    try {\n      const storagedData = window.localStorage.getItem(STORAGE_USER_KEY);\n\n      if (storagedData) {\n        const userData = JSON.parse(storagedData);\n\n        this.user = userData;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  get isLoggedIn(): boolean {\n    return Boolean(this.user);\n  }\n\n  get hasEditAccess(): boolean {\n    return this.user?.role === business.UserRole.admin;\n  }\n\n  setUser = (user: User) => {\n    this.user = user;\n  };\n\n  login = (params: LoginParams): Observable<any> => {\n    return this.http.post(`${API_SERVICES.auth}/login`, params, httpOptions);\n  };\n\n  register = (params: RegisterParams): Observable<any> => {\n    return this.http.post(\n      `${API_SERVICES.auth}/registration`,\n      params,\n      httpOptions\n    );\n  };\n\n  logout = () => {\n    this.user = null;\n    this.storageService.clear();\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}